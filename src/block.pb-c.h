/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: block.proto */

#ifndef PROTOBUF_C_block_2eproto__INCLUDED
#define PROTOBUF_C_block_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _PInputTransaction PInputTransaction;
typedef struct _POutputTransaction POutputTransaction;
typedef struct _PTransaction PTransaction;
typedef struct _PUnspentTransaction PUnspentTransaction;
typedef struct _PBlock PBlock;


/* --- enums --- */


/* --- messages --- */

struct  _PInputTransaction
{
  ProtobufCMessage base;
  ProtobufCBinaryData transaction;
  int32_t txout_index;
  ProtobufCBinaryData signature;
  ProtobufCBinaryData public_key;
};
#define PINPUT_TRANSACTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pinput_transaction__descriptor) \
    , {0,NULL}, 0, {0,NULL}, {0,NULL} }


struct  _POutputTransaction
{
  ProtobufCMessage base;
  int32_t amount;
  ProtobufCBinaryData address;
};
#define POUTPUT_TRANSACTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&poutput_transaction__descriptor) \
    , 0, {0,NULL} }


struct  _PTransaction
{
  ProtobufCMessage base;
  ProtobufCBinaryData id;
  size_t n_txins;
  PInputTransaction **txins;
  size_t n_txouts;
  POutputTransaction **txouts;
};
#define PTRANSACTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ptransaction__descriptor) \
    , {0,NULL}, 0,NULL, 0,NULL }


struct  _PUnspentTransaction
{
  ProtobufCMessage base;
  ProtobufCBinaryData id;
  protobuf_c_boolean coinbase;
  size_t n_unspent_txouts;
  POutputTransaction **unspent_txouts;
};
#define PUNSPENT_TRANSACTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&punspent_transaction__descriptor) \
    , {0,NULL}, 0, 0,NULL }


struct  _PBlock
{
  ProtobufCMessage base;
  int32_t version;
  int32_t bits;
  ProtobufCBinaryData previous_hash;
  ProtobufCBinaryData hash;
  int32_t timestamp;
  int32_t nonce;
  ProtobufCBinaryData merkle_root;
  size_t n_transactions;
  PTransaction **transactions;
};
#define PBLOCK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pblock__descriptor) \
    , 0, 0, {0,NULL}, {0,NULL}, 0, 0, {0,NULL}, 0,NULL }


/* PInputTransaction methods */
void   pinput_transaction__init
                     (PInputTransaction         *message);
size_t pinput_transaction__get_packed_size
                     (const PInputTransaction   *message);
size_t pinput_transaction__pack
                     (const PInputTransaction   *message,
                      uint8_t             *out);
size_t pinput_transaction__pack_to_buffer
                     (const PInputTransaction   *message,
                      ProtobufCBuffer     *buffer);
PInputTransaction *
       pinput_transaction__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pinput_transaction__free_unpacked
                     (PInputTransaction *message,
                      ProtobufCAllocator *allocator);
/* POutputTransaction methods */
void   poutput_transaction__init
                     (POutputTransaction         *message);
size_t poutput_transaction__get_packed_size
                     (const POutputTransaction   *message);
size_t poutput_transaction__pack
                     (const POutputTransaction   *message,
                      uint8_t             *out);
size_t poutput_transaction__pack_to_buffer
                     (const POutputTransaction   *message,
                      ProtobufCBuffer     *buffer);
POutputTransaction *
       poutput_transaction__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   poutput_transaction__free_unpacked
                     (POutputTransaction *message,
                      ProtobufCAllocator *allocator);
/* PTransaction methods */
void   ptransaction__init
                     (PTransaction         *message);
size_t ptransaction__get_packed_size
                     (const PTransaction   *message);
size_t ptransaction__pack
                     (const PTransaction   *message,
                      uint8_t             *out);
size_t ptransaction__pack_to_buffer
                     (const PTransaction   *message,
                      ProtobufCBuffer     *buffer);
PTransaction *
       ptransaction__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ptransaction__free_unpacked
                     (PTransaction *message,
                      ProtobufCAllocator *allocator);
/* PUnspentTransaction methods */
void   punspent_transaction__init
                     (PUnspentTransaction         *message);
size_t punspent_transaction__get_packed_size
                     (const PUnspentTransaction   *message);
size_t punspent_transaction__pack
                     (const PUnspentTransaction   *message,
                      uint8_t             *out);
size_t punspent_transaction__pack_to_buffer
                     (const PUnspentTransaction   *message,
                      ProtobufCBuffer     *buffer);
PUnspentTransaction *
       punspent_transaction__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   punspent_transaction__free_unpacked
                     (PUnspentTransaction *message,
                      ProtobufCAllocator *allocator);
/* PBlock methods */
void   pblock__init
                     (PBlock         *message);
size_t pblock__get_packed_size
                     (const PBlock   *message);
size_t pblock__pack
                     (const PBlock   *message,
                      uint8_t             *out);
size_t pblock__pack_to_buffer
                     (const PBlock   *message,
                      ProtobufCBuffer     *buffer);
PBlock *
       pblock__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pblock__free_unpacked
                     (PBlock *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*PInputTransaction_Closure)
                 (const PInputTransaction *message,
                  void *closure_data);
typedef void (*POutputTransaction_Closure)
                 (const POutputTransaction *message,
                  void *closure_data);
typedef void (*PTransaction_Closure)
                 (const PTransaction *message,
                  void *closure_data);
typedef void (*PUnspentTransaction_Closure)
                 (const PUnspentTransaction *message,
                  void *closure_data);
typedef void (*PBlock_Closure)
                 (const PBlock *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor pinput_transaction__descriptor;
extern const ProtobufCMessageDescriptor poutput_transaction__descriptor;
extern const ProtobufCMessageDescriptor ptransaction__descriptor;
extern const ProtobufCMessageDescriptor punspent_transaction__descriptor;
extern const ProtobufCMessageDescriptor pblock__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_block_2eproto__INCLUDED */
