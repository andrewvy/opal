/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: opal.proto */

#ifndef PROTOBUF_C_opal_2eproto__INCLUDED
#define PROTOBUF_C_opal_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _PInputTransaction PInputTransaction;
typedef struct _POutputTransaction POutputTransaction;
typedef struct _PTransaction PTransaction;
typedef struct _PUnspentOutputTransaction PUnspentOutputTransaction;
typedef struct _PUnspentTransaction PUnspentTransaction;
typedef struct _PBlock PBlock;
typedef struct _PWallet PWallet;
typedef struct _PEmpty PEmpty;
typedef struct _PSendTransactionRequest PSendTransactionRequest;
typedef struct _PSendTransactionResponse PSendTransactionResponse;


/* --- enums --- */


/* --- messages --- */

struct  _PInputTransaction
{
  ProtobufCMessage base;
  ProtobufCBinaryData transaction;
  int32_t txout_index;
  ProtobufCBinaryData signature;
  ProtobufCBinaryData public_key;
};
#define PINPUT_TRANSACTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pinput_transaction__descriptor) \
    , {0,NULL}, 0, {0,NULL}, {0,NULL} }


struct  _POutputTransaction
{
  ProtobufCMessage base;
  int32_t amount;
  ProtobufCBinaryData address;
};
#define POUTPUT_TRANSACTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&poutput_transaction__descriptor) \
    , 0, {0,NULL} }


struct  _PTransaction
{
  ProtobufCMessage base;
  ProtobufCBinaryData id;
  size_t n_txins;
  PInputTransaction **txins;
  size_t n_txouts;
  POutputTransaction **txouts;
};
#define PTRANSACTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ptransaction__descriptor) \
    , {0,NULL}, 0,NULL, 0,NULL }


struct  _PUnspentOutputTransaction
{
  ProtobufCMessage base;
  int32_t amount;
  ProtobufCBinaryData address;
  protobuf_c_boolean spent;
};
#define PUNSPENT_OUTPUT_TRANSACTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&punspent_output_transaction__descriptor) \
    , 0, {0,NULL}, 0 }


struct  _PUnspentTransaction
{
  ProtobufCMessage base;
  ProtobufCBinaryData id;
  protobuf_c_boolean coinbase;
  size_t n_unspent_txouts;
  PUnspentOutputTransaction **unspent_txouts;
};
#define PUNSPENT_TRANSACTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&punspent_transaction__descriptor) \
    , {0,NULL}, 0, 0,NULL }


struct  _PBlock
{
  ProtobufCMessage base;
  int32_t version;
  int32_t bits;
  ProtobufCBinaryData previous_hash;
  ProtobufCBinaryData hash;
  int32_t timestamp;
  int32_t nonce;
  ProtobufCBinaryData merkle_root;
  size_t n_transactions;
  PTransaction **transactions;
};
#define PBLOCK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pblock__descriptor) \
    , 0, 0, {0,NULL}, {0,NULL}, 0, 0, {0,NULL}, 0,NULL }


struct  _PWallet
{
  ProtobufCMessage base;
  ProtobufCBinaryData secret_key;
  ProtobufCBinaryData public_key;
  ProtobufCBinaryData address;
  int32_t balance;
};
#define PWALLET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pwallet__descriptor) \
    , {0,NULL}, {0,NULL}, {0,NULL}, 0 }


struct  _PEmpty
{
  ProtobufCMessage base;
};
#define PEMPTY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pempty__descriptor) \
     }


struct  _PSendTransactionRequest
{
  ProtobufCMessage base;
  PTransaction *transaction;
};
#define PSEND_TRANSACTION_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&psend_transaction_request__descriptor) \
    , NULL }


struct  _PSendTransactionResponse
{
  ProtobufCMessage base;
  ProtobufCBinaryData transaction_id;
};
#define PSEND_TRANSACTION_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&psend_transaction_response__descriptor) \
    , {0,NULL} }


/* PInputTransaction methods */
void   pinput_transaction__init
                     (PInputTransaction         *message);
size_t pinput_transaction__get_packed_size
                     (const PInputTransaction   *message);
size_t pinput_transaction__pack
                     (const PInputTransaction   *message,
                      uint8_t             *out);
size_t pinput_transaction__pack_to_buffer
                     (const PInputTransaction   *message,
                      ProtobufCBuffer     *buffer);
PInputTransaction *
       pinput_transaction__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pinput_transaction__free_unpacked
                     (PInputTransaction *message,
                      ProtobufCAllocator *allocator);
/* POutputTransaction methods */
void   poutput_transaction__init
                     (POutputTransaction         *message);
size_t poutput_transaction__get_packed_size
                     (const POutputTransaction   *message);
size_t poutput_transaction__pack
                     (const POutputTransaction   *message,
                      uint8_t             *out);
size_t poutput_transaction__pack_to_buffer
                     (const POutputTransaction   *message,
                      ProtobufCBuffer     *buffer);
POutputTransaction *
       poutput_transaction__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   poutput_transaction__free_unpacked
                     (POutputTransaction *message,
                      ProtobufCAllocator *allocator);
/* PTransaction methods */
void   ptransaction__init
                     (PTransaction         *message);
size_t ptransaction__get_packed_size
                     (const PTransaction   *message);
size_t ptransaction__pack
                     (const PTransaction   *message,
                      uint8_t             *out);
size_t ptransaction__pack_to_buffer
                     (const PTransaction   *message,
                      ProtobufCBuffer     *buffer);
PTransaction *
       ptransaction__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ptransaction__free_unpacked
                     (PTransaction *message,
                      ProtobufCAllocator *allocator);
/* PUnspentOutputTransaction methods */
void   punspent_output_transaction__init
                     (PUnspentOutputTransaction         *message);
size_t punspent_output_transaction__get_packed_size
                     (const PUnspentOutputTransaction   *message);
size_t punspent_output_transaction__pack
                     (const PUnspentOutputTransaction   *message,
                      uint8_t             *out);
size_t punspent_output_transaction__pack_to_buffer
                     (const PUnspentOutputTransaction   *message,
                      ProtobufCBuffer     *buffer);
PUnspentOutputTransaction *
       punspent_output_transaction__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   punspent_output_transaction__free_unpacked
                     (PUnspentOutputTransaction *message,
                      ProtobufCAllocator *allocator);
/* PUnspentTransaction methods */
void   punspent_transaction__init
                     (PUnspentTransaction         *message);
size_t punspent_transaction__get_packed_size
                     (const PUnspentTransaction   *message);
size_t punspent_transaction__pack
                     (const PUnspentTransaction   *message,
                      uint8_t             *out);
size_t punspent_transaction__pack_to_buffer
                     (const PUnspentTransaction   *message,
                      ProtobufCBuffer     *buffer);
PUnspentTransaction *
       punspent_transaction__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   punspent_transaction__free_unpacked
                     (PUnspentTransaction *message,
                      ProtobufCAllocator *allocator);
/* PBlock methods */
void   pblock__init
                     (PBlock         *message);
size_t pblock__get_packed_size
                     (const PBlock   *message);
size_t pblock__pack
                     (const PBlock   *message,
                      uint8_t             *out);
size_t pblock__pack_to_buffer
                     (const PBlock   *message,
                      ProtobufCBuffer     *buffer);
PBlock *
       pblock__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pblock__free_unpacked
                     (PBlock *message,
                      ProtobufCAllocator *allocator);
/* PWallet methods */
void   pwallet__init
                     (PWallet         *message);
size_t pwallet__get_packed_size
                     (const PWallet   *message);
size_t pwallet__pack
                     (const PWallet   *message,
                      uint8_t             *out);
size_t pwallet__pack_to_buffer
                     (const PWallet   *message,
                      ProtobufCBuffer     *buffer);
PWallet *
       pwallet__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pwallet__free_unpacked
                     (PWallet *message,
                      ProtobufCAllocator *allocator);
/* PEmpty methods */
void   pempty__init
                     (PEmpty         *message);
size_t pempty__get_packed_size
                     (const PEmpty   *message);
size_t pempty__pack
                     (const PEmpty   *message,
                      uint8_t             *out);
size_t pempty__pack_to_buffer
                     (const PEmpty   *message,
                      ProtobufCBuffer     *buffer);
PEmpty *
       pempty__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pempty__free_unpacked
                     (PEmpty *message,
                      ProtobufCAllocator *allocator);
/* PSendTransactionRequest methods */
void   psend_transaction_request__init
                     (PSendTransactionRequest         *message);
size_t psend_transaction_request__get_packed_size
                     (const PSendTransactionRequest   *message);
size_t psend_transaction_request__pack
                     (const PSendTransactionRequest   *message,
                      uint8_t             *out);
size_t psend_transaction_request__pack_to_buffer
                     (const PSendTransactionRequest   *message,
                      ProtobufCBuffer     *buffer);
PSendTransactionRequest *
       psend_transaction_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   psend_transaction_request__free_unpacked
                     (PSendTransactionRequest *message,
                      ProtobufCAllocator *allocator);
/* PSendTransactionResponse methods */
void   psend_transaction_response__init
                     (PSendTransactionResponse         *message);
size_t psend_transaction_response__get_packed_size
                     (const PSendTransactionResponse   *message);
size_t psend_transaction_response__pack
                     (const PSendTransactionResponse   *message,
                      uint8_t             *out);
size_t psend_transaction_response__pack_to_buffer
                     (const PSendTransactionResponse   *message,
                      ProtobufCBuffer     *buffer);
PSendTransactionResponse *
       psend_transaction_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   psend_transaction_response__free_unpacked
                     (PSendTransactionResponse *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*PInputTransaction_Closure)
                 (const PInputTransaction *message,
                  void *closure_data);
typedef void (*POutputTransaction_Closure)
                 (const POutputTransaction *message,
                  void *closure_data);
typedef void (*PTransaction_Closure)
                 (const PTransaction *message,
                  void *closure_data);
typedef void (*PUnspentOutputTransaction_Closure)
                 (const PUnspentOutputTransaction *message,
                  void *closure_data);
typedef void (*PUnspentTransaction_Closure)
                 (const PUnspentTransaction *message,
                  void *closure_data);
typedef void (*PBlock_Closure)
                 (const PBlock *message,
                  void *closure_data);
typedef void (*PWallet_Closure)
                 (const PWallet *message,
                  void *closure_data);
typedef void (*PEmpty_Closure)
                 (const PEmpty *message,
                  void *closure_data);
typedef void (*PSendTransactionRequest_Closure)
                 (const PSendTransactionRequest *message,
                  void *closure_data);
typedef void (*PSendTransactionResponse_Closure)
                 (const PSendTransactionResponse *message,
                  void *closure_data);

/* --- services --- */

typedef struct _PInternal_Service PInternal_Service;
struct _PInternal_Service
{
  ProtobufCService base;
  void (*get_wallet)(PInternal_Service *service,
                     const PEmpty *input,
                     PWallet_Closure closure,
                     void *closure_data);
  void (*send_transaction)(PInternal_Service *service,
                           const PSendTransactionRequest *input,
                           PSendTransactionResponse_Closure closure,
                           void *closure_data);
};
typedef void (*PInternal_ServiceDestroy)(PInternal_Service *);
void pinternal__init (PInternal_Service *service,
                      PInternal_ServiceDestroy destroy);
#define PINTERNAL__BASE_INIT \
    { &pinternal__descriptor, protobuf_c_service_invoke_internal, NULL }
#define PINTERNAL__INIT(function_prefix__) \
    { PINTERNAL__BASE_INIT,\
      function_prefix__ ## get_wallet,\
      function_prefix__ ## send_transaction  }
void pinternal__get_wallet(ProtobufCService *service,
                           const PEmpty *input,
                           PWallet_Closure closure,
                           void *closure_data);
void pinternal__send_transaction(ProtobufCService *service,
                                 const PSendTransactionRequest *input,
                                 PSendTransactionResponse_Closure closure,
                                 void *closure_data);

/* --- descriptors --- */

extern const ProtobufCMessageDescriptor pinput_transaction__descriptor;
extern const ProtobufCMessageDescriptor poutput_transaction__descriptor;
extern const ProtobufCMessageDescriptor ptransaction__descriptor;
extern const ProtobufCMessageDescriptor punspent_output_transaction__descriptor;
extern const ProtobufCMessageDescriptor punspent_transaction__descriptor;
extern const ProtobufCMessageDescriptor pblock__descriptor;
extern const ProtobufCMessageDescriptor pwallet__descriptor;
extern const ProtobufCMessageDescriptor pempty__descriptor;
extern const ProtobufCMessageDescriptor psend_transaction_request__descriptor;
extern const ProtobufCMessageDescriptor psend_transaction_response__descriptor;
extern const ProtobufCServiceDescriptor pinternal__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_opal_2eproto__INCLUDED */
